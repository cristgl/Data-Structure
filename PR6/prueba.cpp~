#include "bintree.h"
#include "avl.h"
#include <iostream>
#include <iomanip>
#include <vector>

using namespace std;

#define placeholder (1<<31)
// create a pretty vertical tree
void postorder(bintree< pair<int,int> >::node p);
void getLine(const bintree< pair<int,int> >::node root, int depth, vector<int>& vals);
void printRow(const bintree< pair<int,int> >::node p, const int height, int depth);

void postorder(bintree< pair<int,int> >::node p)
{
	int height = ((*(p)).second) * 2;cout << "estoy mostrando " << height << " y " << (*p).second<< endl;	
	for (int i = 0 ; i < height; i ++) {
        printRow(p, height, i);
    }
}
void getLine(const bintree< pair<int,int> >::node root, int depth, vector<int>& vals)
{
        if (depth <= 0 && !(root).null() ){
                vals.push_back((*(root)).first);
                return;
        }
        if (!(root).left().null())
                getLine(((root).left()), depth-1, vals);
        else if (depth-1 <= 0)
                vals.push_back(placeholder);
        if (!(root).right().null())
                getLine((root).right(), depth-1, vals);
        else if (depth-1 <= 0)
                vals.push_back(placeholder);
}


void printRow(const bintree< pair<int,int> >::node p, const int height, int depth)
{
        vector<int> vec;
        getLine(p, depth, vec);
        cout << setw((height - depth)*2); // scale setw with depth
        bool toggle = true; // start with left
        if (vec.size() > 1) {
                for (int v : vec) {
                        if (v != placeholder) {
                                if (toggle)
                                        cout << "/" << "   ";
                                else
                                        cout << "\\" << "   ";
                        }
                        toggle = !toggle;
                }
                cout << endl;
                cout << setw((height - depth)*2);
        }
        for (int v : vec) {
                if (v != placeholder)
                        cout << v << "   ";
        }
        cout << endl;
}





int main(){

	bintree<int> sd;
	AVL<int,less<int>> tree,tree2;
	typename AVL<int,less<int>>::iterator it,it2;
	
	int val=3,val2=6,val3=7,val4=2,val5=1,val6=4,val7=5,val8=0;

	tree.insert(val);
	tree.insert(val2);
	tree.insert(val3);
	tree.insert(val4);
	tree.insert(val5); 
	tree.insert(val6);
	tree.insert(val7);
	tree.insert(val8);val8=8;
	tree.insert(val8);val8=9;
	tree.insert(val8);val8=10;
	tree.insert(val8);val8=11;
	tree.insert(val8);val8=-1;
	tree.insert(val8);val8=13; 
	tree.insert(val8);val8=17;
	tree.insert(val8);val8=18;
	tree.insert(val8);val8=19;
	tree.insert(val8);
	
	tree.insert(val8);val8=8;
	tree.insert(val8);val8=6;
	tree.insert(val8);val8=4;
	tree.insert(val8);val8=9;
	tree.insert(val8);val8=13;
	tree.insert(val8);val8=2;
	
	it=tree.find(13);
	tree.erase(it);
	
	tree.swap(tree2);

	it=tree.lower_bound(val); 
	it2=tree.upper_bound(val);
	cout << "El lower bound de " << val << " es " << (*it) << " y su upper bound es " << *it2 << endl;
	
	/*	Prueba de operator++ y --, begin y end de iterator
	typename AVL<int,less<int>>::iterator it;
	int ii=0;
	for(it=tree.begin(); ii<10;++it){
		cout << "el iterador es " <<  (*it) << endl;
		ii++;	
	}	
	cout << "------------------------------------------" << endl;
	
	for(it; it!=tree.begin();--it){
		cout << "el iterador es " << (*it) << endl;
	}
	*/
	
	/*	Prueba de operator++ y --, cbegin y cend de const iterator
	typename AVL<int,less<int>>::const_iterator it;
	int ii=0;
	for(it=tree.cbegin(); ii<10;++it){
		cout << "el iterador es " <<  (*it) << endl;
		ii++;	
	}	
	cout << "------------------------------------------" << endl;
	
	for(it; it!=tree.cbegin();--it){
		cout << "el iterador es " << (*it) << endl;
	}
	*/
	
	/*	Prueba de operator++ y --, rbegin y rend de reverse iterator
	typename AVL<int,less<int>>::reverse_iterator it;
	int ii=0;
	for(it=tree.rbegin(); ii<10;++it){
		cout << "el iterador es " <<  (*it) << endl;
		ii++;	
	}	
	cout << "------------------------------------------" << endl;
	
	for(it; it!=tree.rbegin();--it){
		cout << "el iterador es " << (*it) << endl;
	}
	*/
	
	/*	Prueba de operator++ y --, crbegin y crend de const reverse iterator
	typename AVL<int,less<int>>::const_reverse_iterator it;
	int ii=0;
	for(it=tree.crbegin(); ii<10;++it){
		cout << "el iterador es " <<  (*it) << endl;
		ii++;	
	}	
	cout << "------------------------------------------" << endl;
	
	for(it; it!=tree.crbegin();--it){
		cout << "el iterador es " << (*it) << endl;
	}
	*/
}

